.game-container
  .game-left-panel
    - if waiting_for_players # Correct: Use the local variable name
      #waiting-message
        %h2.text-center.text-warning Waiting for players to join. Required: #{server.max_players}.
        %p.text-center.text-muted Current players: #{server.server_users.count}/#{server.max_players}.
    - else
      #player-stats
        = render partial: "games/player_stats", locals: { server_user: server_user }
        #inventory-container
          %h3.text-primary Inventory:
          = render partial: "games/inventory", locals: { items: server_user.inventories.includes(:item) }
        #treasures-container
          %h3.text-primary Treasures:
          = render partial: "games/treasures", locals: { treasures: server_user.treasures }
      = button_to "Leave Game", leave_server_server_users_path(server), method: :delete, data: { confirm: 'Are you sure?' }

  .game-center-panel
    %h2.text-center.text-secondary Game Board
    #game-board
      = render partial: "games/game_board", locals: { grid_cells: grid_cells, server_user: server_user, server_users: server_users }
    #opponent-details
      = render partial: "games/opponent_details", locals: { opponents: opponents, server: server }

  .game-right-panel
    #current-turn
      = render partial: "games/current_turn", locals: { current_turn_user: current_turn_user }
    - if server.current_turn_server_user == server_user
      .game-action-controls
        %h3.text-primary Your Turn
        .game-movement-controls
          %h4.text-secondary Movement:
          = button_to '↑', perform_action_server_game_path(server, server.game), class: 'btn-game-movement up', params: { action_type: 'move', direction: 'up' }, method: :post
          = button_to '←', perform_action_server_game_path(server, server.game), class: 'btn-game-movement left', params: { action_type: 'move', direction: 'left' }, method: :post
          = button_to '→', perform_action_server_game_path(server, server.game), class: 'btn-game-movement right', params: { action_type: 'move', direction: 'right' }, method: :post
          = button_to '↓', perform_action_server_game_path(server, server.game), class: 'btn-game-movement down', params: { action_type: 'move', direction: 'down' }, method: :post
        .game-actions
          %h4.text-secondary Other Actions:
          = button_to 'Occupy Cell',  perform_action_server_game_path(server,  server.game), class: 'btn-game-action btn-primary', params: { action_type: 'occupy' }, method: :post
          = button_to 'Capture Cell',  perform_action_server_game_path(server,  server.game), class: 'btn-game-action btn-danger', params: { action_type: 'capture', direction: 'right' }, method: :post
    - else
      .d-flex.justify-content-center
        .game-legend
          %h3.text-primary Player Symbol:
          %ul
            - server.server_users.each do |su|
              %li
                %span{ class: "game-symbol game-symbol-#{su.symbol}" }= su.symbol
                = "#{su.user.username} (AP: #{su.total_ap})"
  .chatbox{ id: "chatbox", data: { game_id: server.id } }
    %div#messages.messages-container
    %form#chat-form
      %input#chat-input{ type: "text", placeholder: "Type a message..." }
      %button{ type: "submit" } Send